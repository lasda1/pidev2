{% extends 'base.html.twig' %}

{% block body %}
    <style>

        #map {
            height: 400px;

        }
        .pac-container {
            font-family: Roboto;
        }

        #type-selector {
            color: #fff;
            background-color: #4d90fe;
            padding: 5px 11px 0px 11px;
        }

        #type-selector label {
            font-family: Roboto;
            font-size: 13px;
            font-weight: 300;
        }
    </style>
    <div class="col-md-1"></div>
    <div class="col-md-6">
        {{ form_start(form) }}
        {{ form_widget(form.titre,{'attr':{'class':'form-control','placeholder':"Nom de l'evennement"}}) }}
        <br>
        {{ form_widget(form.description,{'attr':{'class':'form-control','placeholder':"description de l'evennement"}}) }}
        <br>
        {{ form_widget(form.datedebut,{'attr':{'class':'form-control ','placeholder':"Date de l'evennement"}}) }}
        <br>
        {{ form_widget(form.datefin,{'attr':{'class':'form-control ','placeholder':"Date de Fin de l'evennement s'il y a plusieurs jours"}}) }}
        <br>
        {{ form_widget(form.photo,{'attr':{'class':'form-control ','placeholder':"Logo de l'evennement"}}) }}
        <br>
        {{ form_widget(form.nbMax,{'attr':{'class':'form-control ','placeholder':"Nombre de place"}}) }}
        <br>
        {{ form_widget(form.lieu,{'attr':{'class':'form-control controls','placeholder':'OÃ¹ vas se passer?'}}) }}
        <br>
        <div class="col-md-6">
            {{ form_widget(form.x,{'attr':{'class':'form-control','placeholder':'x'}}) }}
        </div>
        <div class="col-md-6">
            {{ form_widget(form.y,{'attr':{'class':'form-control','placeholder':'y'}}) }}
            <br>
        </div>
        {{ form_widget(form.categorie,{'attr':{'class':'form-control ','placeholder':"Categorie de l'evennement"}}) }}


        {{ form_widget(form) }}
        <br>
        <input type="submit" class="btn btn-primary" value="Publier l'evennement" onclick="xy()" />
        {{ form_end(form) }}
    </div>

    <div class="col-md-5" id="map">

    </div>



    <script>
        function xy() {

            document.getElementById('eventbundle_event_x').value=map.center.lat();

            document.getElementById('eventbundle_event_y').value=map.center.lng();
        }


        // This example requires the Places library. Include the libraries=places
        // parameter when you first load the API. For example:
        // <script src="https://maps.googleapis.com/maps/api/js?key=YOUR_API_KEY&libraries=places">
        var marker;
        function initMap() {
            var map = new google.maps.Map(document.getElementById('map'), {
                center: {lat: {{ event.x }}, lng: {{ event.y}} },
                zoom: 17
            });
            var input = /** @type {!HTMLInputElement} */(
                document.getElementById('eventbundle_event_lieu'));


            var autocomplete = new google.maps.places.Autocomplete(input);
            autocomplete.bindTo('bounds', map);

            var infowindow = new google.maps.InfoWindow();
            var marker = new google.maps.Marker({
                map: map,
                anchorPoint: new google.maps.Point(0, -29)

            });
            marker = new google.maps.Marker({
                map: map,
                draggable: true,
                animation: google.maps.Animation.DROP,
                position: {lat: {{ event.x }}, lng: {{ event.y}} }


            });
            marker.setMap(map);
            marker.addListener('click', toggleBounce);

            google.maps.event.addListener(marker, 'drag', function(event) {
                document.getElementById('eventbundle_event_x').value =event.latLng.lat();
                document.getElementById('eventbundle_event_y').value= event.latLng.lng();

            });


            autocomplete.addListener('place_changed', function() {
                infowindow.close();
                marker.setVisible(false);

                var place = autocomplete.getPlace();

                // If the place has a geometry, then present it on a map.
                if (place.geometry.viewport) {
                    map.fitBounds(place.geometry.viewport);
                } else {
                    map.setCenter(place.geometry.location);
                    map.setZoom(10);  // Why 17? Because it looks good.

                }


                ;
                marker.setPosition(place.geometry.location);
                marker.setVisible(true);


                var address = '';
                if (place.address_components) {
                    address = [
                        (place.address_components[0] && place.address_components[0].short_name || ''),
                        (place.address_components[1] && place.address_components[1].short_name || ''),
                        (place.address_components[2] && place.address_components[2].short_name || '')
                    ].join(' ');
                }

                infowindow.setContent('<div><strong>' + place.name + '</strong><br>' + address);
                infowindow.open(map, marker);
            });

            // Sets a listener on a radio button to change the filter type on Places
            // Autocomplete.
            function setupClickListener(id, types) {
                var radioButton = document.getElementById(id);
                radioButton.addEventListener('click', function() {
                    autocomplete.setTypes(types);
                });
            }


        }
        function toggleBounce() {
            if (marker.getAnimation() !== null) {
                marker.setAnimation(null);
            } else {
                marker.setAnimation(google.maps.Animation.BOUNCE);
            }
        }
    </script>
    <script src="https://maps.googleapis.com/maps/api/js?key=AIzaSyCWb0i4faRZm8P5oEN-ukUF_CACQzWt480&libraries=places&callback=initMap"
            async defer></script>

{% endblock %}
